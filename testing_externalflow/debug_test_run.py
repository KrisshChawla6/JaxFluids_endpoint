#!/usr/bin/env python3
"""
JAX-Fluids External Flow Simulation
Generated by External Flow Endpoint

This script follows the standard JAX-Fluids simulation pattern
as documented in the examples and documentation.
"""

import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

import numpy as np
import matplotlib.pyplot as plt


from jaxfluids import InputManager, InitializationManager, SimulationManager
from jaxfluids_postprocess import load_data, create_2D_animation, create_2D_figure

def main():
    """Main simulation function following JAX-Fluids standard pattern"""
    
    print("üöÄ Starting JAX-Fluids External Flow Simulation")
    print("=" * 60)
    
    try:
        # SETUP SIMULATION - Standard JAX-Fluids pattern
        print("üìã Setting up simulation managers...")
        input_manager = InputManager("test_case.json", "test_numerical.json")
        initialization_manager = InitializationManager(input_manager)
        sim_manager = SimulationManager(input_manager)
        print("‚úÖ Simulation managers initialized")
        
        # RUN SIMULATION - Standard JAX-Fluids execution
        print("üîÑ Running simulation...")
        jxf_buffers = initialization_manager.initialization()
        sim_manager.simulate(jxf_buffers)
        print("‚úÖ Simulation completed successfully!")
        
        # LOAD DATA - Standard JAX-Fluids post-processing
        print("üìä Loading simulation data...")
        path = sim_manager.output_writer.save_path_domain
        quantities = ['density', 'velocity', 'pressure', 'levelset', 'volume_fraction', 'mach_number', 'schlieren']
        jxf_data = load_data(path, quantities)
        
        cell_centers = jxf_data.cell_centers
        data = jxf_data.data
        times = jxf_data.times
        print(f"‚úÖ Loaded {len(quantities)} quantities over {len(times)} time steps")
        
        # PREPARE DATA - Mask solid regions for external flow visualization
        if "volume_fraction" in data:
            mask_fluid = data["volume_fraction"] > 0.0
            mask_solid = 1.0 - mask_fluid
        else:
            mask_fluid = None
            mask_solid = None
        
        # CREATE 3D VISUALIZATION - 2D slices
        print("üìä Creating 3D visualization (2D slices)...")
        
        plot_dict = {
            "u": data["velocity"][:,0],
            "v": data["velocity"][:,1],
            "w": data["velocity"][:,2],
        }
        
        nrows_ncols = (1,3)
        os.makedirs("images", exist_ok=True)
        create_2D_animation(
            plot_dict, 
            cell_centers, 
            times, 
            nrows_ncols=nrows_ncols, 
            plane="xy",
            plane_value=0.0, 
            interval=100,
            save_png="images", 
            fig_args={"figsize": (15,5)}, 
            dpi=200)
        print("‚úÖ 3D visualization completed")
        
        print("\n" + "=" * 60)
        print("üéâ JAX-Fluids simulation completed successfully!")
        print("üìÅ Results saved to:", sim_manager.output_writer.save_path_domain)
        
    except Exception as e:
        print(f"‚ùå Simulation failed: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
