#!/usr/bin/env python3
"""
VectraSim Intelligent Simulation Suite
Adaptive JAX-Fluids Script Generator

Generated for: external_flow (3D)
Simulation Intent: Test external flow simulation with optimized configuration
Plotting Mode: standard

This script was automatically generated by VectraSim's adaptive agent
based on JAX-Fluids (Apache 2.0 licensed) for computational fluid dynamics.

VectraSim - Advanced Computational Physics Platform
"""

import time
import os
import sys

import numpy as np
import matplotlib.pyplot as plt

import jax
import jax.numpy as jnp
from jax import random

sys.path.append("../jax_cfd")  # Adjust path if necessary
from jax_cfd.base import boundaries
from jax_cfd.base import grids
from jax_cfd.base import initial_conditions
from jax_cfd.base import io
from jax_cfd.base import pressure
from jax_cfd.base import timestepping
from jax_cfd.colocation import poisson
from jax_cfd.data import datasets
from jax_cfd.ml import architectures
from jax_cfd.ml import losses
from jax_cfd.ml import physics_informed
from jax_cfd.ml import train
from jax_cfd.spectral import utils as spectral_utils
from jax_cfd.spectral import time_stepping as spectral_time_stepping
from jax_cfd.spectral import problems
from jax_cfd.utils import array_utils
from jax_cfd.utils import custom_types
from jax_cfd.utils import filtering
from jax_cfd.utils import grid_utils
from jax_cfd.utils import init_utils
from jax_cfd.utils import interpolation
from jax_cfd.utils import jax_utils
from jax_cfd.utils import plotting
from jax_cfd.utils import sim_utils
from jax_cfd.utils import xla
from jax_cfd.external_scripts import build_data
from jax_cfd.external_scripts import predict
from jax_cfd.external_scripts import train_lib

from absl import app
from absl import flags
from flax import linen as nn
import hydra
from hydra.core.config_store import ConfigStore
from omegaconf import DictConfig, OmegaConf

# Define custom types
Array = custom_types.Array
Scalar = custom_types.Scalar
GridArray = custom_types.GridArray
ForcingFn = custom_types.ForcingFn
TimeStepFn = custom_types.TimeStepFn

# Define flags
FLAGS = flags.FLAGS

# Define configuration store
cs = ConfigStore.instance()

# Define main function
@hydra.main(config_path=None, config_name="config")
def main(cfg: DictConfig) -> None:
  """Main function."""

  # --- VectraSim Optimizations ---
  # 1. Disable levelset output in case configuration
  cfg.output.primitives = ['density', 'velocity', 'pressure', 'volume_fraction', 'mach_number', 'schlieren']
  cfg.output.miscellaneous = []
  cfg.output.levelset = []
  # 2. Ensure single device decomposition
  cfg.domain.decomposition = {"split_x": 1, "split_y": 1, "split_z": 1}
  # 3. Add gravity field if missing
  if 'gravity' not in cfg.physics:
    cfg.physics['gravity'] = [0.0, 0.0, 0.0]
  # --- End VectraSim Optimizations ---

  # Input Manager
  input_manager = sim_utils.InputManager(cfg)
  params = input_manager.get_params()
  grid = input_manager.get_grid()
  dt = input_manager.get_dt()
  bc = input_manager.get_boundary_conditions()
  physics_specs = input_manager.get_physics_specs()
  output_fields = input_manager.get_output_fields()
  time_interval = input_manager.get_time_interval()
  post_process_fn = input_manager.get_post_process_fn()
  diagnostics_fn = input_manager.get_diagnostics_fn()
  forcing_fn = input_manager.get_forcing_fn()

  # Initialization Manager
  initialization_manager = sim_utils.InitializationManager(cfg, grid)
  initial_state = initialization_manager.get_initial_state()

  # Simulation Manager
  simulation_manager = sim_utils.SimulationManager(
      params,
      grid,
      dt,
      bc,
      physics_specs,
      forcing_fn,
      time_interval,
      post_process_fn,
      diagnostics_fn,
  )
  step_fn = simulation_manager.get_step_fn()

  # Run simulation
  num_steps = int(cfg.time_end / dt)
  state = initial_state
  t = 0.0
  start_time = time.time()

  for i in range(num_steps):
    state = step_fn(state)
    t += dt

    if i % cfg.output.every == 0:
      # --- VectraSim Visualization ---
      # Adapt visualization for external_flow (3D)
      print(f"Step: {i}, Time: {t:.4f}")
      output = simulation_manager.get_output(state)

      # Example visualization (adapt as needed)
      if 'density' in output_fields:
        plotting.plot_3d_scalar(grid, output['density'], title=f"Density at t={t:.4f}", filename=f"density_{i:04d}.png")
      if 'velocity' in output_fields:
        plotting.plot_3d_vector_field(grid, output['velocity'], title=f"Velocity at t={t:.4f}", filename=f"velocity_{i:04d}.png")
      if 'pressure' in output_fields:
        plotting.plot_3d_scalar(grid, output['pressure'], title=f"Pressure at t={t:.4f}", filename=f"pressure_{i:04d}.png")
      if 'levelset' in output_fields and len(output['levelset']) > 0:
          plotting.plot_3d_scalar(grid, output['levelset'][0], title=f"Levelset at t={t:.4f}", filename=f"levelset_{i:04d}.png")
      if 'volume_fraction' in output_fields:
          plotting.plot_3d_scalar(grid, output['volume_fraction'], title=f"Volume Fraction at t={t:.4f}", filename=f"volume_fraction_{i:04d}.png")
      if 'mach_number' in output_fields:
          plotting.plot_3d_scalar(grid, output['mach_number'], title=f"Mach Number at t={t:.4f}", filename=f"mach_number_{i:04d}.png")
      if 'schlieren' in output_fields:
          plotting.plot_3d_scalar(grid, output['schlieren'], title=f"Schlieren at t={t:.4f}", filename=f"schlieren_{i:04d}.png")

      # --- End VectraSim Visualization ---

  end_time = time.time()
  print(f"Simulation finished in {end_time - start_time:.2f} seconds.")


if __name__ == "__main__":
  # Set CUDA device
  os.environ["CUDA_VISIBLE_DEVICES"] = "0"
  # Load configuration files (replace with your actual file paths)
  case_config_path = "case_setup_temp.json"
  numerical_config_path = "numerical_setup_temp.json"

  # Create dummy config files if they don't exist
  if not os.path.exists(case_config_path):
      with open(case_config_path, "w") as f:
          f.write('{"domain": {"shape": [64, 64, 64], "length": [1.0, 1.0, 1.0], "decomposition": {"split_x": 1, "split_y": 1, "split_z": 1}}, "physics": {"viscosity": 0.0001, "density": 1.0, "gravity": [0.0, 0.0, 0.0]}, "boundary_conditions": {"type": "periodic"}, "initial_conditions": {"type": "random"}, "output": {"every": 10, "primitives": ["density", "velocity", "pressure", "volume_fraction", "mach_number", "schlieren"], "miscellaneous": [], "levelset": []}, "time_end": 1.0}')
  if not os.path.exists(numerical_config_path):
      with open(numerical_config_path, "w") as f:
          f.write('{"dt": 0.001, "integrator": "rk4"}')

  # Convert config files to OmegaConf objects
  case_cfg = OmegaConf.load(case_config_path)
  numerical_cfg = OmegaConf.load(numerical_config_path)

  # Merge the configurations
  cfg = OmegaConf.merge(case_cfg, numerical_cfg)

  # Run the simulation
  app.run(lambda argv: main(cfg))