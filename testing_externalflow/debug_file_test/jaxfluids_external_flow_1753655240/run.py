#!/usr/bin/env python3
"""
VectraSim Intelligent Simulation Suite
AI-Generated JAX-Fluids Script - Mission Critical

Generated for: external_flow (3D)
Simulation Intent: Debug test - check file generation
Plotting Mode: standard

This script was automatically generated by VectraSim's AI agent
based on JAX-Fluids (Apache 2.0 licensed) for computational fluid dynamics.

VectraSim - Advanced Computational Physics Platform
"""

import os
import sys
import time
import json
import traceback
from jaxfluids import InputManager, InitializationManager, SimulationManager

def modify_config_for_production(case_file: str) -> str:
    """Apply VectraSim's proven optimizations for stable JAX-Fluids execution"""
    
    print("üîß Applying VectraSim optimizations...")
    
    # Load original config
    with open(case_file, 'r', encoding='utf-8') as f:
        case_config = json.load(f)
    
    # VectraSim's proven optimizations
    # Disable levelset output to avoid JAX-Fluids output writing bug
    case_config['output'] = {
        "primitives": [],     # Minimal output for stability
        "miscellaneous": [], 
        "levelset": []        # Disable levelset output (avoids known JAX-Fluids bug)
    }
    
    # Ensure single device decomposition
    if 'domain' in case_config and 'decomposition' in case_config['domain']:
        case_config['domain']['decomposition'] = {
            'split_x': 1,
            'split_y': 1, 
            'split_z': 1
        }
    
    # Add gravity if missing (required by JAX-Fluids)
    if 'forcings' not in case_config:
        case_config['forcings'] = {'gravity': [0.0, 0.0, 0.0]}
    
    # Write optimized config
    optimized_file = case_file.replace('.json', '_ai_optimized.json')
    with open(optimized_file, 'w', encoding='utf-8') as f:
        json.dump(case_config, f, indent=2)
    
    print(f"‚úÖ VectraSim AI optimizations applied: {os.path.basename(optimized_file)}")
    return optimized_file

def main():
    """Main function to execute the JAX-Fluids simulation."""
    
    case_file = "jaxfluids_external_flow_1753655240.json"
    numerical_file = "numerical_setup.json"
    
    start_time = time.time()
    
    try:
        # Apply VectraSim optimizations
        optimized_case_file = modify_config_for_production(case_file)
        
        # Initialize InputManager
        input_manager = InputManager(case_file=optimized_case_file, numerical_file=numerical_file)
        
        # Initialize InitializationManager
        initialization_manager = InitializationManager(input_manager)
        state = initialization_manager.initialize()
        
        # Initialize SimulationManager
        simulation_manager = SimulationManager(input_manager)
        
        # Run simulation (minimal steps for debug)
        num_steps = 5  # Reduced steps for debug
        for step in range(num_steps):
            state = simulation_manager.step(state)
            print(f"Step {step+1}/{num_steps} completed.")
        
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"‚úÖ Simulation completed successfully in {execution_time:.2f} seconds.")
        
        # Performance Metrics
        print("\nüìä Performance Metrics:")
        print(f"  - Total Execution Time: {execution_time:.2f} seconds")
        print(f"  - Steps Performed: {num_steps}")
        print(f"  - Average Time per Step: {execution_time/num_steps:.4f} seconds")
        
        # Cleanup optimized file
        try:
            os.remove(optimized_case_file)
            print(f"üßπ Cleaned up optimized configuration file: {os.path.basename(optimized_case_file)}")
        except OSError as e:
            print(f"‚ö†Ô∏è Warning: Could not delete temporary file {optimized_case_file}: {e}")
        
        sys.exit(0)  # Success
        
    except Exception as e:
        print(f"‚ùå Simulation failed: {e}")
        traceback.print_exc()
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"Simulation failed after {execution_time:.2f} seconds.")
        sys.exit(1)  # Failure

if __name__ == "__main__":
    main()