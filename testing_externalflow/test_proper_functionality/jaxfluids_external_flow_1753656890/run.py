#!/usr/bin/env python3
"""
VectraSim Intelligent Simulation Suite
AI-Generated JAX-Fluids Script - Mission Critical

Generated for: external_flow (3D)
Simulation Intent: Production test - aerospace simulation with proper functionality
Plotting Mode: standard

This script was automatically generated by VectraSim's AI agent
based on JAX-Fluids (Apache 2.0 licensed) for computational fluid dynamics.

VectraSim - Advanced Computational Physics Platform
"""

import os
import sys
import time
import json
import shutil
from jaxfluids import InputManager, InitializationManager, SimulationManager

def modify_config_for_production(case_file: str) -> str:
    """Apply VectraSim's production optimizations for stable JAX-Fluids execution"""
    
    print("üîß Applying VectraSim production optimizations...")
    
    # Load original config
    with open(case_file, 'r', encoding='utf-8') as f:
        case_config = json.load(f)
    
    # VectraSim's production-grade optimizations
    # Configure proper output settings for stable execution
    if 'output' in case_config:
        # Keep essential outputs but configure them properly for stability
        case_config['output'] = {
            "primitives": ["density", "velocity", "pressure"],  # Essential flow quantities
            "miscellaneous": ["mach_number"],                   # Key derived quantities
            "levelset": ["volume_fraction"]                     # Proper levelset output
        }
    
    # Ensure single device decomposition for development/testing
    if 'domain' in case_config and 'decomposition' in case_config['domain']:
        case_config['domain']['decomposition'] = {
            'split_x': 1,
            'split_y': 1, 
            'split_z': 1
        }
    
    # Ensure proper nondimensionalization for stable numerics
    if 'nondimensionalization_parameters' in case_config:
        nondim = case_config['nondimensionalization_parameters']
        if 'length_reference' not in nondim or nondim['length_reference'] == 0:
            nondim['length_reference'] = 1.0  # Proper length reference
    
    # Add gravity if missing (required by JAX-Fluids)
    if 'forcings' not in case_config:
        case_config['forcings'] = {'gravity': [0.0, 0.0, 0.0]}
    
    # Configure reasonable simulation time for initial testing
    if case_config['general']['end_time'] > 100.0:
        case_config['general']['end_time'] = 10.0     # Reasonable test duration
        case_config['general']['save_dt'] = 1.0       # Regular output interval
    
    # Write optimized config
    optimized_file = case_file.replace('.json', '_production_optimized.json')
    with open(optimized_file, 'w', encoding='utf-8') as f:
        json.dump(case_config, f, indent=2)
    
    print(f"‚úÖ VectraSim production optimizations applied: {os.path.basename(optimized_file)}")
    return optimized_file

def main():
    """Main function to execute the JAX-Fluids simulation."""
    
    case_file = "jaxfluids_external_flow_1753656890.json"
    numerical_file = "numerical_setup.json"
    
    try:
        start_time = time.time()
        
        # Apply VectraSim production optimizations
        optimized_case_file = modify_config_for_production(case_file)
        
        # JAX-Fluids execution
        print("üöÄ Starting JAX-Fluids simulation...")
        input_manager = InputManager(optimized_case_file, numerical_file)
        initialization_manager = InitializationManager(input_manager)
        sim_manager = SimulationManager(input_manager)
        
        # Initialize and run
        buffers = initialization_manager.initialization()
        sim_manager.simulate(buffers)
        
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"‚è±Ô∏è  JAX-Fluids simulation completed in {execution_time:.2f} seconds.")
        
        # Performance metrics
        num_steps = input_manager.config['general']['num_steps']
        steps_per_second = num_steps / execution_time
        print(f"üìä Performance: {steps_per_second:.2f} steps/second")
        
        # Clean up temporary files
        print("üßπ Cleaning up temporary files...")
        os.remove(optimized_case_file)
        print("‚úÖ Temporary files cleaned.")
        
        print("üéâ VectraSim JAX-Fluids simulation completed successfully!")
        sys.exit(0)  # Exit with success code
        
    except FileNotFoundError as e:
        print(f"‚ùå Error: File not found: {e}")
        sys.exit(1)  # Exit with error code
    except KeyError as e:
        print(f"‚ùå Error: Missing key in configuration: {e}")
        sys.exit(1)  # Exit with error code
    except ValueError as e:
        print(f"‚ùå Error: Invalid value in configuration: {e}")
        sys.exit(1)  # Exit with error code
    except Exception as e:
        print(f"‚ùå Error: An unexpected error occurred: {e}")
        sys.exit(1)  # Exit with error code

if __name__ == "__main__":
    main()