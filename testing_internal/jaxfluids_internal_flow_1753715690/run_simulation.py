#!/usr/bin/env python3
"""
JAX-Fluids Internal Flow Simulation Runner
Enhanced with Intelligent Boundary Conditions
Generated by VectraSim Internal Flow Endpoint
"""

import argparse
import json
import sys
import time
import logging
from pathlib import Path
from datetime import datetime
import numpy as np

try:
    import jax.numpy as jnp
    from jaxfluids import InputManager, InitializationManager, SimulationManager
    JAX_FLUIDS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è JAX-Fluids not available. This is a template script.")
    JAX_FLUIDS_AVAILABLE = False

class InternalFlowSimulationRunner:
    """Internal flow simulation runner with intelligent boundary conditions"""
    
    def __init__(self, config_file: str = "jaxfluids_internal_flow_1753715690.json", 
                 numerical_file: str = "numerical_setup.json"):
        """Initialize simulation runner"""
        self.config_file = Path(config_file)
        self.numerical_file = Path(numerical_file)
        self.output_dir = Path("output")
        self.log_dir = Path("logs")
        
        # Create directories
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.log_dir.mkdir(parents=True, exist_ok=True)
        
        # Setup logging
        self.setup_logging()
        
        # Simulation info
        self.simulation_name = "jaxfluids_internal_flow_1753715690"
        self.bc_storage_dir = "C:\Users\kriss\Desktop\Endpoint JAX  FLuids\testing_internal\bc_processed\subdirectory_4"
        self.inlet_points = 1872
        self.outlet_points = 7120
        
    def setup_logging(self):
        """Setup simulation logging"""
        log_file = self.log_dir / f"simulation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger(__name__)
        
    def validate_setup(self):
        """Validate simulation setup"""
        self.logger.info("üîç VALIDATING SIMULATION SETUP")
        self.logger.info("=" * 60)
        
        # Check files
        if not self.config_file.exists():
            raise FileNotFoundError(f"Config file not found: {self.config_file}")
        if not self.numerical_file.exists():
            raise FileNotFoundError(f"Numerical file not found: {self.numerical_file}")
            
        # Validate boundary conditions
        if Path(self.bc_storage_dir).exists():
            self.logger.info(f"‚úÖ Boundary conditions: {self.bc_storage_dir}")
            self.logger.info(f"   üî¥ Inlet points: {self.inlet_points:,}")
            self.logger.info(f"   üü¢ Outlet points: {self.outlet_points:,}")
        else:
            self.logger.warning("‚ö†Ô∏è Boundary condition directory not found")
            
        self.logger.info("‚úÖ Setup validation completed")
        
    def run_simulation(self, max_iterations: int = 100):
        """Run the simulation"""
        if not JAX_FLUIDS_AVAILABLE:
            self.logger.error("‚ùå JAX-Fluids not available. Cannot run simulation.")
            return
            
        self.logger.info("üöÄ STARTING INTERNAL FLOW SIMULATION")
        self.logger.info("=" * 80)
        self.logger.info(f"   Simulation: {self.simulation_name}")
        self.logger.info(f"   Config: {self.config_file}")
        self.logger.info(f"   Numerical: {self.numerical_file}")
        self.logger.info(f"   Max iterations: {max_iterations}")
        self.logger.info(f"   Intelligent BCs: {self.inlet_points:,} inlet, {self.outlet_points:,} outlet")
        self.logger.info("=" * 80)
        
        start_time = time.time()
        
        try:
            # Validate setup
            self.validate_setup()
            
            # Initialize JAX-Fluids
            self.logger.info("üîß Initializing JAX-Fluids...")
            
            # Load configuration
            input_manager = InputManager(str(self.config_file), str(self.numerical_file))
            initialization_manager = InitializationManager(input_manager)
            sim_manager = SimulationManager(input_manager)
            
            # Initialize simulation
            self.logger.info("üîß Initializing simulation state...")
            buffers = initialization_manager.initialization()
            
            # Run simulation
            self.logger.info("üöÄ Running simulation...")
            sim_manager.simulate(buffers)
            
            elapsed_time = time.time() - start_time
            self.logger.info("üéâ SIMULATION COMPLETED SUCCESSFULLY!")
            self.logger.info(f"   Total time: {elapsed_time:.2f} seconds")
            self.logger.info(f"   Output directory: {self.output_dir}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Simulation failed: {e}")
            raise

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description='JAX-Fluids Internal Flow Simulation')
    parser.add_argument('--iterations', '-i', type=int, default=100,
                       help='Maximum number of iterations')
    parser.add_argument('--config', '-c', type=str, default='jaxfluids_internal_flow_1753715690.json',
                       help='Configuration file')
    parser.add_argument('--numerical', '-n', type=str, default='numerical_setup.json',
                       help='Numerical setup file')
    
    args = parser.parse_args()
    
    print("üöÄ JAX-Fluids Internal Flow Simulation Runner")
    print("Enhanced with Intelligent Boundary Conditions")
    print("=" * 60)
    
    try:
        runner = InternalFlowSimulationRunner(args.config, args.numerical)
        runner.run_simulation(args.iterations)
        
    except Exception as e:
        print(f"‚ùå Simulation failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
