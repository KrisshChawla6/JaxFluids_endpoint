#!/usr/bin/env python3
"""
VectraSim Intelligent Simulation Suite
AI-Generated JAX-Fluids Script - Mission Critical

Generated for: external_flow (3D)
Simulation Intent: Quick test of working JAX-Fluids run script
Plotting Mode: standard

This script was automatically generated by VectraSim's AI agent
based on JAX-Fluids (Apache 2.0 licensed) for computational fluid dynamics.

VectraSim - Advanced Computational Physics Platform
"""

import os
import json
import glob
from jaxfluids import InputManager, InitializationManager, SimulationManager

def modify_config_for_production(case_file: str) -> str:
    """Apply VectraSim's production optimizations for stable JAX-Fluids execution"""
    
    print("üîß Applying VectraSim production optimizations...")
    
    # Load original config
    with open(case_file, 'r', encoding='utf-8') as f:
        case_config = json.load(f)
    
         # VectraSim's proven optimizations for stability
     # Configure minimal output to avoid JAX-Fluids internal bugs
     case_config['output'] = {
         "primitives": [],     # Minimal output for stability
         "miscellaneous": [], 
         "levelset": []        # Disable levelset output (avoids known JAX-Fluids bug)
     }
    
    # Ensure single device decomposition for development/testing
    if 'domain' in case_config and 'decomposition' in case_config['domain']:
        case_config['domain']['decomposition'] = {
            'split_x': 1,
            'split_y': 1, 
            'split_z': 1
        }
    
    # Ensure proper nondimensionalization for stable numerics
    if 'nondimensionalization_parameters' in case_config:
        nondim = case_config['nondimensionalization_parameters']
        if 'length_reference' not in nondim or nondim['length_reference'] == 0:
            nondim['length_reference'] = 1.0  # Proper length reference
    
    # Add gravity if missing (required by JAX-Fluids)
    if 'forcings' not in case_config:
        case_config['forcings'] = {'gravity': [0.0, 0.0, 0.0]}
    
         # Configure reasonable simulation time for testing (~100 iterations)
     if 'general' in case_config:
         # Calculate time for ~100 iterations based on CFL
         dt_estimate = 3.5e-5  # Typical CFL-limited timestep from JAX-Fluids
         end_time = 100 * dt_estimate  # ~100 iterations  
         case_config['general']['end_time'] = end_time
         case_config['general']['save_dt'] = end_time / 10  # Save every ~10 iterations
    
         # Handle SDF path structure - look for sdf_data subdirectory
     if 'initial_condition' in case_config and 'levelset' in case_config['initial_condition']:
         if case_config['initial_condition']['levelset'] == 'CUSTOM_SDF':
            
            # Find the SDF file in sdf_data subdirectory
            config_dir = os.path.dirname(case_file)
            sdf_pattern = os.path.join(config_dir, 'sdf_data', '*', '*_sdf_matrix.npy')
            sdf_files = glob.glob(sdf_pattern)
            
            if sdf_files:
                # Use the first SDF matrix file found
                sdf_file = sdf_files[0]
                # Convert to relative path from config directory
                rel_sdf_path = os.path.relpath(sdf_file, config_dir)
                                 case_config['initial_condition']['levelset'] = f'CUSTOM_SDF({rel_sdf_path})'
                 print(f"üîß SDF integration: {{rel_sdf_path}}")
            else:
                print("‚ö†Ô∏è No SDF files found in sdf_data subdirectory")
                # Remove levelset reference if no SDF found
                case_config['initial_condition']['levelset'] = 'SPHERE(center=[0.0, 0.0, 0.0], radius=0.5)'
    
    # Write optimized config
    optimized_file = case_file.replace('.json', '_production_optimized.json')
    with open(optimized_file, 'w', encoding='utf-8') as f:
        json.dump(case_config, f, indent=2)
    
    print(f"‚úÖ VectraSim production optimizations applied: {os.path.basename(optimized_file)}")
    return optimized_file

# Configuration files
case_file = "jaxfluids_external_flow_1753662714.json"
numerical_file = "numerical_setup.json"

# Apply production optimizations
optimized_case_file = modify_config_for_production(case_file)

try:
    # JAX-Fluids simulation execution
    input_manager = InputManager(optimized_case_file, numerical_file)
    initialization_manager = InitializationManager(input_manager)
    sim_manager = SimulationManager(input_manager)
    buffers = initialization_manager.initialization()
    sim_manager.simulate(buffers)

    print("‚úÖ JAX-Fluids simulation completed successfully.")

except Exception as e:
    print(f"‚ùå JAX-Fluids simulation failed: {e}")
    exit(1)


# Configuration files
# jaxfluids_external_flow_1753662714.json
# numerical_setup.json